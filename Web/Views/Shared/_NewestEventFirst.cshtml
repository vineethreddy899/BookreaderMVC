@model Web.Models.EventModel
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> _signInManager
@inject UserManager<IdentityUser> _userManager
@{ var user = await _userManager.GetUserAsync(User);
                var email = user != null ? user.Email : ""; }

<div class="col-md-4">
    <div class="card mb-4 shadow-sm" style="width: 18rem;">
        <div class="card-body">
            <div class="card-title text-center">
                <h4><a asp-controller="Event" asp-action="ViewDetails" asp-route-id="@Model.Id" class="text-dark">@Model.Title</a></h4>
            </div>

            <div>
                <p class="text-info d-inline">Location :</p>@Model.Location
            </div>
            <div>
                <p class="text-info d-inline">Date :</p> @Model.Date.ToShortDateString()
            </div>
            <div>
                <p class="text-info d-inline">Start Time :</p> @Model.Date.ToShortTimeString()
            </div>
            <div>
                <div>It's a <p class="font-weight-bold d-inline text-info">@Model.Type </p>Event</div>
            </div>
            <div >
                <div>Organised by <p class="font-weight-bold d-inline text-info">@Model.Organiser</p></div>
            </div>
            <p></p>
            <div class="btn-group text-center">
                <a asp-action="ViewDetails" asp-controller="Event" asp-route-id="@Model.Id" class="btn btn-sm btn-outline-info">View Details</a>
            </div>
            <p></p>
            @if (_signInManager.IsSignedIn(User) && (User.Identity.Name == Model.Organiser || email == "myadmin@bookevents.com") && Model.Date >= DateTime.Now)
            {
                <p></p>
                <div class="btn-group text-center">
                    <a asp-action="UpdateEvent" asp-route-id="@Model.Id" asp-controller="Event" class="btn btn-sm btn-outline-info">Update Details</a>
                </div>
                <p></p>
            }

        </div>

    </div>
</div>

